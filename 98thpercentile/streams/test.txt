Skip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random PassSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to WriteSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random PassSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightboxword Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random PassSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightboxword Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random PassSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightboxword Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random PassSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightboxword Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random PassSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightboxword Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random PassSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightboxword Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random PassSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightboxword Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random PassSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightboxword Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random PassSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightboxword Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random PassSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightboxword Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random PassSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightboxword Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random PassSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightboxword Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random PassSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightboxword Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random PassSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightboxword Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random PassSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightboxword Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random PassSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightboxword Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random PassSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightboxword Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random PassSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightboxword Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random PassSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightboxword Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random PassSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightboxword Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random PassSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightboxword Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random PassSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightboxword Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random PassSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightboxword Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random PassSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightboxword Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random PassSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightboxword Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random PassSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightboxword Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random PassSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightboxword Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightbox
Lightbox
Lightbox
Lightbox
Lightbox
Lightbox
Lightbox
Lightbox
Lightbox
Lightbox
Lightbox
Lightbox
Lightbox
Lightbox
Lightbox
Lightbox
Lightbox
Lightbox
Lightbox
Lightbox
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random PassSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightboxword Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random PassSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightboxword Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random PassSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightboxword Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random PassSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightboxword Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random PassSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
LightboxSkip to content
geeksforgeeks
Courses Upto 75% Off
Tutorials
HTML/CSS
JavaScript


Sign In

Courses upto 75% Off
NodeJS Tutorial
NodeJS Exercises
NodeJS Assert
NodeJS Buffer
NodeJS Console
NodeJS Crypto
NodeJS DNS
NodeJS File System
NodeJS Globals
NodeJS HTTP
NodeJS HTTP2
NodeJS OS
NodeJS Path
NodeJS Process
NodeJS Query String
NodeJS Stream
NodeJS String Decoder
NodeJS Timers
NodeJS URL
NodeJS Interview Questions
NodeJS Questions
Web Technology
▲
Solve Coding Problems
Share Your Experience
Node.js Tutorial
Node.js Basic
Node.js Assert Module
Node.js Buffer Module
Node.js Console Module
Node.js Crypto Module
Node.js DNS Module
Node.js File System Module
Node.js Globals
Node.js HTTP Module
Node.js HTTP2 Module
Node.js OS Module
Node.js Path Module
Node.js Process Module
Node.js Query String Module
Node.js Stream Module
Node.js Streams
Node.js Stream writable.cork() Method
Node.js Stream writable.writableLength Property
Node.js Stream writable.writableObjectMode Property
Node.js Stream writable.writableFinished Property
Node.js Stream writable.destroy() Method
Node.js Stream writable.writableCorked Property
Node.js Stream writable.end() Method
Node.js stream.Writable close Event
Node.js Stream Complete Reference
Node.js String Decoder Module
Node.js Timers Module
Node.js TLS/SSL Module
Node.js UDP/DataGram Module
Node.js URL Module
Node.js Utility Module
Node.js V8 Module
Node.js VM Module
Node.js Zlib Module
Node.js Questions
Full Stack DevelopmentCourse
Node.js Streams
Last Updated : 08 Oct, 2021
Streams are one of the fundamental concepts of Node.js. Streams are a type of data-handling methods and are used to read or write input into output sequentially. Streams are used to handle reading/writing files or exchanging information in an efficient way.

The official Node.js documentation defines streams as “A stream is an abstract interface for working with streaming data in Node.js.” The stream module provides an API for implementing the stream interface. Examples of the stream object in Node.js can be a request to an HTTP server and process.stdout are both stream instances. In short, Streams are objects in Node.js that lets the user read data from a source or write data to a destination in a continuous manner.

Accessing Streams:

const stream = require('stream');
Note: What makes streams powerful while dealing with large amounts of data is that instead of reading a file into memory all at once, streams actually read chunks of data, processing its content data without keeping it all in memory.

Advantages of Streams over other data handling methods:

Time Efficient: We don’t have to wait until entire file has been transmitted. We can start processing data as soon as we have it.
Memory Efficient: We don’t have to load huge amount of data in memory before we start processing.
Types of Streams in Node.js: There are namely four types of streams in Node.js.

Writable: We can write data to these streams. Example: fs.createWriteStream().
Readable: We can read data from these streams. Example: fs.createReadStream().
Duplex: Streams that are both, Writable as well as Readable. Example: net.socket.
Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
Some Node APIs that uses streams are:

net.Socket()
process.stdin()
process.stdout()
process.stderr()
fs.createReadStream()
fs.createWriteStream()
net.connect()
http.request()
zlib.createGzip()
zlib.createGunzip()
zlib.createDeflate()
zlib.createInflate()
Implementing a Readable Stream: We will read the data from inStream and echoing it to the standard output using process.stdout.

// Sample JavaScript Code for creating 
// a Readable Stream 
// Accessing streams 
const { Readable } = require('stream'); 
  
// Reading the data  
const inStream = new Readable({ 
    read() { } 
}); 
  
// Pushing the data to the stream 
inStream.push('GeeksForGeeks : '); 
inStream.push( 
    'A Computer Science portal for Geeks'); 
  
// Indicates that no more data is 
// left in the stream 
inStream.push(null); 
  
// Echoing data to the standard output 
inStream.pipe(process.stdout); 
Output:

GeeksForGeeks : A Computer Science portal for Geeks 
Implementing a Writable Stream: In the outStream, we simply console.log the chunk as a string. We also call the callback function to indicate success without any errors. We will read the data from inStream and echo it to the standard output using process.stdout.

// Sample JavaScript Code for 
// Writable Stream 
// Accessing Streams 
const { Writable } = require('stream'); 
  
// Whatever is passed in standard  
// input is out streamed here. 
const outStream = new Writable({ 
  
    // The Write function takes three  
    // arguments 
    // Chunk is for Buffer 
    // Encoding is used in case we want 
    // to configure the stream differently 
    // In this sample code, Encoding is ignored  
    // callback is used to indicate  
    // successful execution 
    write(chunk, encoding, callback) { 
        console.log(chunk.toString()); 
        callback(); 
    } 
  
}); 
  
// Echo the data to the standard output 
process.stdin.pipe(outStream); 
Output:

Hello Geeks

Never before seen offer on GeeksforGeeks Courses! Get up-to 75% off on all premium courses such as Full Stack Web Dev, Backend Dev, DSA for Interview and more. Avail discount now!
Want to be a Software Developer or a Working Professional looking to enhance your Software Development Skills? Then, master the concepts of Full-Stack Development. Our Full Stack Development - React and Node.js Course will help you achieve this quickly. Learn everything from Front-End to Back-End Development with hands-on Projects and real-world examples. This course enables you to build scalable, efficient, dynamic web applications that stand out. Ready to become an expert in Full-Stack? Enroll Now and Start Creating the Future!


author
anmolsharmalbs

12
Previous Article
Node.js Query String Complete Reference
Next Article
Node.js Stream writable.cork() Method
Similar Reads
Servers, streams and sockets in Node
Node.js Server Node.js is a javascript framework for writing Server-side applications. A Node.js server provides the mechanisms for connecting to a service and sending/receiving data. It achieves this through TCP or UDP connections. Developers can hence create their own server and test their app deployment. NodeJS comes with a simple HTTP server bu
5 min read
Explain the concept of streams in Node
Streams in Node provide an efficient way to handle data flowing through an application. They allow you to read from or write to a source continuously, processing chunks of data as they become available, without needing to load the entire dataset into memory at once. What are Streams?Streams in NodeJS represent a sequence of data that can be read fr
2 min read
How do Change Streams Work In MongoDB?
Change Streams in MongoDB allow applications to access real-time data changes without the complexity and overhead of polling the database. They provide a powerful and efficient way to listen to changes in collections, databases, or entire clusters. These are the following sub topics that we are going to discuss: Table of Content How Change Streams
3 min read
Node.js Automatic restart Node.js server with nodemon
We generally type following command for starting NodeJs server: node server.js In this case, if we make any changes to the project then we will have to restart the server by killing it using CTRL+C and then typing the same command again. node server.js It is a very hectic task for the development process. Nodemon is a package for handling this rest
1 min read
Top 3 Best Packages Of Node.js that you should try being a Node.js Developer
Node.js is an open-source and server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js has its own package manager called NPM( Node Package Manager) which has very useful and incredible libraries and frameworks that makes our life easier as a developer to work with Node.js. The 3 Best Packages of Node.js that you should
4 min read
View More Articles
Article Tags :
Node.js
Web Technologies

three90RightbarBannerImg


course-img
254k+ interested Geeks
Full Stack Development with React & Node JS - Live
Upto 75% Off
course-img
2k+ interested Geeks
Mastering ReactJS - Complete Beginner to Advance
Upto 75% Off
course-img
6k+ interested Geeks
Complete Bootstrap Course For Beginners
Upto 75% Off


geeksforgeeks-footer-logo
A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
Careers
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
Explore
Job-A-Thon Hiring Challenge
Hack-A-Thon
GfG Weekly Contest
Offline Classes (Delhi/NCR)
DSA in JAVA/C++
Master System Design
Master CP
GeeksforGeeks Videos
Geeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
DSA Interview Questions
Competitive Programming
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning Tutorial
ML Maths
Data Visualisation Tutorial
Pandas Tutorial
NumPy Tutorial
NLP Tutorial
Deep Learning Tutorial
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
NodeJs
Bootstrap
Tailwind CSS
Python Tutorial
Python Programming Examples
Django Tutorial
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Computer Science
GATE CS Notes
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
DevOps
Git
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
Accountancy
Business Studies
Economics
Management
HR Management
Finance
Income Tax
Databases
SQL
MYSQL
PostgreSQL
PL/SQL
MongoDB
Preparation Corner
Company-Wise Recruitment Process
Resume Templates
Aptitude Preparation
Puzzles
Company-Wise Preparation
Companies
Colleges
Competitive Exams
JEE Advanced
UGC NET
UPSC
SSC CGL
SBI PO
SBI Clerk
IBPS PO
IBPS Clerk
More Tutorials
Software Development
Software Testing
Product Management
Project Management
Linux
Excel
All Cheat Sheets
Free Online Tools
Typing Test
Image Editor
Code Formatters
Code Converters
Currency Converter
Random Number Generator
Random Password Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightboxword Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightbox
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightboxword Generator
Write & Earn
Write an Article
Improve an Article
Pick Topics to Write
Share your Experiences
Internships
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightbox